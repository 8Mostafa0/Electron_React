"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublisherGithub = void 0;
const node_path_1 = __importDefault(require("node:path"));
const publisher_base_1 = require("@electron-forge/publisher-base");
const request_error_1 = require("@octokit/request-error");
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const log_symbols_1 = __importDefault(require("log-symbols"));
const mime_types_1 = __importDefault(require("mime-types"));
const github_1 = __importDefault(require("./util/github"));
const no_release_error_1 = __importDefault(require("./util/no-release-error"));
class PublisherGithub extends publisher_base_1.PublisherBase {
    constructor() {
        super(...arguments);
        this.name = 'github';
    }
    async publish({ makeResults, setStatusLine }) {
        const { config } = this;
        const perReleaseArtifacts = {};
        for (const makeResult of makeResults) {
            const release = makeResult.packageJSON.version;
            if (!perReleaseArtifacts[release]) {
                perReleaseArtifacts[release] = [];
            }
            perReleaseArtifacts[release].push(makeResult);
        }
        if (!(config.repository && typeof config.repository === 'object' && config.repository.owner && config.repository.name)) {
            throw new Error('In order to publish to GitHub, you must set the "repository.owner" and "repository.name" properties in your Forge config. See the docs for more info');
        }
        const github = new github_1.default(config.authToken, true, config.octokitOptions);
        const octokit = github.getGitHub();
        for (const releaseVersion of Object.keys(perReleaseArtifacts)) {
            let release;
            const artifacts = perReleaseArtifacts[releaseVersion];
            const releaseName = `${config.tagPrefix ?? 'v'}${releaseVersion}`;
            setStatusLine(`Searching for target release: ${releaseName}`);
            try {
                release = (await github.getGitHub().repos.listReleases({
                    owner: config.repository.owner,
                    repo: config.repository.name,
                    per_page: 100,
                })).data.find((testRelease) => testRelease.tag_name === releaseName);
                if (!release) {
                    throw new no_release_error_1.default(404);
                }
            }
            catch (err) {
                if (err instanceof no_release_error_1.default && err.code === 404) {
                    // Release does not exist, let's make it
                    release = (await github.getGitHub().repos.createRelease({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        tag_name: releaseName,
                        name: releaseName,
                        draft: config.draft !== false,
                        prerelease: config.prerelease === true,
                        generate_release_notes: config.generateReleaseNotes === true,
                    })).data;
                }
                else {
                    // Unknown error
                    throw err;
                }
            }
            let uploaded = 0;
            const updateUploadStatus = () => {
                setStatusLine(`Uploading distributable (${uploaded}/${artifacts.length} to ${releaseName})`);
            };
            updateUploadStatus();
            await Promise.all(artifacts
                .flatMap((artifact) => artifact.artifacts)
                .map(async (artifactPath) => {
                const done = () => {
                    uploaded += 1;
                    updateUploadStatus();
                };
                const artifactName = node_path_1.default.basename(artifactPath);
                const sanitizedArtifactName = github_1.default.sanitizeName(artifactName);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const asset = release.assets.find((item) => item.name === sanitizedArtifactName);
                if (asset !== undefined) {
                    if (config.force === true) {
                        await github.getGitHub().repos.deleteReleaseAsset({
                            owner: config.repository.owner,
                            repo: config.repository.name,
                            asset_id: asset.id,
                        });
                    }
                    else {
                        return done();
                    }
                }
                try {
                    const { data: uploadedAsset } = await github.getGitHub().repos.uploadReleaseAsset({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        release_id: release.id,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        url: release.upload_url,
                        // https://github.com/octokit/rest.js/issues/1645
                        data: (await fs_extra_1.default.readFile(artifactPath)),
                        headers: {
                            'content-type': mime_types_1.default.lookup(artifactPath) || 'application/octet-stream',
                            'content-length': (await fs_extra_1.default.stat(artifactPath)).size,
                        },
                        name: artifactName,
                    });
                    if (uploadedAsset.name !== sanitizedArtifactName) {
                        // There's definitely a bug with GitHub.sanitizeName
                        console.warn(log_symbols_1.default.warning, chalk_1.default.yellow(`Expected artifact's name to be '${sanitizedArtifactName}' - got '${uploadedAsset.name}'`));
                    }
                }
                catch (err) {
                    // If an asset with that name already exists, it's either a bug with GitHub.sanitizeName
                    // where it did not sanitize the artifact name in the same way as GitHub did, or there
                    // was simply a race condition with uploading artifacts with the same name
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (err instanceof request_error_1.RequestError && err.status === 422 && err.response?.data?.errors?.[0].code === 'already_exists') {
                        console.error(`Asset with name '${artifactName}' already exists - there may be a bug with Forge's GitHub.sanitizeName util`);
                    }
                    throw err;
                }
                return done();
            }));
        }
    }
}
exports.default = PublisherGithub;
exports.PublisherGithub = PublisherGithub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHVibGlzaGVyR2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1B1Ymxpc2hlckdpdGh1Yi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwwREFBNkI7QUFFN0IsbUVBQWlGO0FBRWpGLDBEQUFzRDtBQUV0RCxrREFBMEI7QUFDMUIsd0RBQTBCO0FBQzFCLDhEQUFxQztBQUNyQyw0REFBOEI7QUFHOUIsMkRBQW1DO0FBQ25DLCtFQUFxRDtBQVVyRCxNQUFxQixlQUFnQixTQUFRLDhCQUFvQztJQUFqRjs7UUFDRSxTQUFJLEdBQUcsUUFBUSxDQUFDO0lBa0lsQixDQUFDO0lBaElDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFvQjtRQUM1RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRXhCLE1BQU0sbUJBQW1CLEdBRXJCLEVBQUUsQ0FBQztRQUVQLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFO1lBQ3BDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO1lBQy9DLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDakMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQ25DO1lBQ0QsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxVQUFVLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEgsTUFBTSxJQUFJLEtBQUssQ0FDYixzSkFBc0osQ0FDdkosQ0FBQztTQUNIO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxn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